/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  NFTChecker,
  NFTCheckerInterface,
} from "../../../../contracts/launchpad/NFTChecker.sol/NFTChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AdminIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsIndexOutOfBound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerIsNotTheAdmin",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "addAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "addIncentivesController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "collection",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIncentivesControllersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getStakedNFTIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "incentivesControllers",
    outputs: [
      {
        internalType: "contract IBalanceController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isIncentivesController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_identity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_incentivesController",
        type: "address",
      },
    ],
    name: "isNftStaked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "removeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "removeIncentivesController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610df2380380610df283398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b608051610d076100eb600039600081816101f101526108c20152610d076000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063704802751161008c5780637de1e536116100665780637de1e536146101ec5780638da5cb5b14610213578063e9763f0e14610224578063f2fde38b1461023757600080fd5b806370480275146101b1578063715018a6146101c45780637301d2c2146101cc57600080fd5b806332465b71116100c857806332465b711461015757806364e82ef81461016a578063676eda551461018d57806367739d0e1461019e57600080fd5b806315a15539146100ef5780631785f53c1461011f57806324d7806c14610134575b600080fd5b6101026100fd366004610ae0565b61024a565b6040516001600160a01b0390911681526020015b60405180910390f35b61013261012d366004610b0e565b610274565b005b610147610142366004610b0e565b610335565b6040519015158152602001610116565b610132610165366004610ae0565b61036f565b610147610178366004610b0e565b60036020526000908152604090205460ff1681565b600254604051908152602001610116565b6101476101ac366004610b2b565b610496565b6101326101bf366004610b0e565b6104ad565b610132610570565b6101df6101da366004610b0e565b610584565b6040516101169190610b6d565b6101027f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610102565b610132610232366004610b0e565b61074a565b610132610245366004610b0e565b6107e1565b6002818154811061025a57600080fd5b6000918252602090912001546001600160a01b0316905081565b61027c61085a565b6001600160a01b0381166102a35760405163274338ef60e11b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff166102ec57604051630ed580c760e41b81526001600160a01b03821660048201526024015b60405180910390fd5b6001600160a01b038116600081815260016020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a250565b6001600160a01b03811660009081526001602052604081205460ff168061036957506000546001600160a01b038381169116145b92915050565b61037761085a565b600254811061039957604051636d9317c560e01b815260040160405180910390fd5b600060036000600284815481106103b2576103b2610bb1565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600280546103f690600190610bdd565b8154811061040657610406610bb1565b600091825260209091200154600280546001600160a01b03909216918390811061043257610432610bb1565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600280548061047157610471610bf0565b600082815260209020810160001990810180546001600160a01b031916905501905550565b60006104a38484846108b4565b90505b9392505050565b6104b561085a565b6001600160a01b0381166104dc5760405163274338ef60e11b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16156105215760405163f646f2cd60e01b81526001600160a01b03821660048201526024016102e3565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a250565b61057861085a565b6105826000610970565b565b60025460609060009067ffffffffffffffff8111156105a5576105a5610c06565b6040519080825280602002602001820160405280156105ce578160200160208202803683370190505b5090506000805b6002548110156106af576000600282815481106105f4576105f4610bb1565b6000918252602090912001546040516327e235e360e01b81526001600160a01b038881166004830152909116906327e235e390602401608060405180830381865afa158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b9190610c1c565b90508060600151156106a6576040810151848461068781610c9b565b95508151811061069957610699610bb1565b6020026020010181815250505b506001016105d5565b5060008167ffffffffffffffff8111156106cb576106cb610c06565b6040519080825280602002602001820160405280156106f4578160200160208202803683370190505b50905060005b828110156107415783818151811061071457610714610bb1565b602002602001015182828151811061072e5761072e610bb1565b60209081029190910101526001016106fa565b50949350505050565b610753336109c0565b6001600160a01b03811661077a5760405163f106f2bd60e01b815260040160405180910390fd5b6002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b039093166001600160a01b031990931683179055600091825260036020526040909120805460ff19169091179055565b6107e961085a565b6001600160a01b03811661084e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e3565b61085781610970565b50565b6000546001600160a01b031633146105825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e3565b6000836001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e856040518263ffffffff1660e01b815260040161090e91815260200190565b602060405180830381865afa15801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190610cb4565b6001600160a01b031603610965575060016104a6565b6104a3848484610a20565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff161580156109f757506000546001600160a01b03828116911614155b1561085757604051636d3f049f60e01b81526001600160a01b03821660048201526024016102e3565b6001600160a01b03811660009081526003602052604081205460ff1615610ad6576040516327e235e360e01b81526001600160a01b038581166004830152600091908416906327e235e390602401608060405180830381865afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190610c1c565b905080606001518015610ac55750838160400151145b15610ad45760019150506104a6565b505b5060009392505050565b600060208284031215610af257600080fd5b5035919050565b6001600160a01b038116811461085757600080fd5b600060208284031215610b2057600080fd5b81356104a681610af9565b600080600060608486031215610b4057600080fd5b8335610b4b81610af9565b9250602084013591506040840135610b6281610af9565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610ba557835183529284019291840191600101610b89565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561036957610369610bc7565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060808284031215610c2e57600080fd5b6040516080810181811067ffffffffffffffff82111715610c5f57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301518015158114610c8f57600080fd5b60608201529392505050565b600060018201610cad57610cad610bc7565b5060010190565b600060208284031215610cc657600080fd5b81516104a681610af956fea2646970667358221220a8913d94af696c2f6a456b08c96a2fc5a8de7e724433a34e9cc75b136687982264736f6c63430008170033";

type NFTCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTChecker__factory extends ContractFactory {
  constructor(...args: NFTCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTChecker> {
    return super.deploy(_collection, overrides || {}) as Promise<NFTChecker>;
  }
  override getDeployTransaction(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_collection, overrides || {});
  }
  override attach(address: string): NFTChecker {
    return super.attach(address) as NFTChecker;
  }
  override connect(signer: Signer): NFTChecker__factory {
    return super.connect(signer) as NFTChecker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTCheckerInterface {
    return new utils.Interface(_abi) as NFTCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTChecker {
    return new Contract(address, _abi, signerOrProvider) as NFTChecker;
  }
}
