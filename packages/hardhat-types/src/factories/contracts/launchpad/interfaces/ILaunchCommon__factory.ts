/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILaunchCommon,
  ILaunchCommonInterface,
} from "../../../../contracts/launchpad/interfaces/ILaunchCommon";

const _abi = [
  {
    inputs: [],
    name: "AlreadyClaimed",
    type: "error",
  },
  {
    inputs: [],
    name: "AlreadyLaunched",
    type: "error",
  },
  {
    inputs: [],
    name: "ArraysLengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAllocations",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDexIndex",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidHardCap",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRewardsAllocations",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRounds",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSteakTeamFee",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTotalSupply",
    type: "error",
  },
  {
    inputs: [],
    name: "LaunchFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "LaunchIsNotFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "LaunchIsNotLaunched",
    type: "error",
  },
  {
    inputs: [],
    name: "LaunchIsNotPending",
    type: "error",
  },
  {
    inputs: [],
    name: "LiquidityAllocationIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "MinPledgeNotReached",
    type: "error",
  },
  {
    inputs: [],
    name: "PledgeLimitReached",
    type: "error",
  },
  {
    inputs: [],
    name: "TeamIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "UserIsKOL",
    type: "error",
  },
  {
    inputs: [],
    name: "UserIsNotKOL",
    type: "error",
  },
  {
    inputs: [],
    name: "UserNotNFTOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "UserSaleNotStarted",
    type: "error",
  },
  {
    inputs: [],
    name: "VerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "XIsAddressZero",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "factory",
        type: "address",
      },
    ],
    name: "ControllerFactorySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "DexProviderAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ic",
        type: "address",
      },
    ],
    name: "FomoICSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "launchId",
        type: "uint256",
      },
    ],
    name: "HardCapReached",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "launchId",
        type: "uint256",
      },
    ],
    name: "LaunchCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "launchId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountLP",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountUsdc",
        type: "uint256",
      },
    ],
    name: "Pledged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "launchId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountLP",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountUsdc",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
    ],
    name: "PledgedWithNFT",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ic",
        type: "address",
      },
    ],
    name: "SteakICSet",
    type: "event",
  },
] as const;

export class ILaunchCommon__factory {
  static readonly abi = _abi;
  static createInterface(): ILaunchCommonInterface {
    return new utils.Interface(_abi) as ILaunchCommonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILaunchCommon {
    return new Contract(address, _abi, signerOrProvider) as ILaunchCommon;
  }
}
