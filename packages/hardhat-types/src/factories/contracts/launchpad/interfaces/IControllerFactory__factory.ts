/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IControllerFactory,
  IControllerFactoryInterface,
} from "../../../../contracts/launchpad/interfaces/IControllerFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdcLP",
        type: "address",
      },
      {
        internalType: "address",
        name: "_fomoLP",
        type: "address",
      },
      {
        internalType: "address",
        name: "_memberNFT",
        type: "address",
      },
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "createNewTokenControllers",
    outputs: [
      {
        internalType: "address[5]",
        name: "controllers",
        type: "address[5]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IControllerFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IControllerFactoryInterface {
    return new utils.Interface(_abi) as IControllerFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IControllerFactory {
    return new Contract(address, _abi, signerOrProvider) as IControllerFactory;
  }
}
