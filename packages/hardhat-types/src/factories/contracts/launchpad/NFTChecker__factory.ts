/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  NFTChecker,
  NFTCheckerInterface,
} from "../../../contracts/launchpad/NFTChecker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_collection",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "AdminIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsIndexOutOfBound",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "CallerIsNotTheAdmin",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "AdminRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "addAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "addIncentivesController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "collection",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIncentivesControllersCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getStakedNFTIds",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "incentivesControllers",
    outputs: [
      {
        internalType: "contract IBalanceController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isIncentivesController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_identity",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_incentivesController",
        type: "address",
      },
    ],
    name: "isNftStaked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    name: "removeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "removeIncentivesController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610dcd380380610dcd83398101604081905261002f91610099565b61003833610049565b6001600160a01b03166080526100c9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ab57600080fd5b81516001600160a01b03811681146100c257600080fd5b9392505050565b608051610ce26100eb600039600081816101ca01526108900152610ce26000f3fe608060405234801561001057600080fd5b50600436106100ca5760003560e01c8063704802751161007c578063704802751461018a578063715018a61461019d5780637301d2c2146101a55780637de1e536146101c55780638da5cb5b146101ec578063e9763f0e146101fd578063f2fde38b1461021057600080fd5b806315a15539146100cf5780631785f53c146100f857806324d7806c1461010d57806332465b711461013057806364e82ef814610143578063676eda551461016657806367739d0e14610177575b600080fd5b6100e26100dd366004610aa7565b610223565b6040516100ef9190610ac0565b60405180910390f35b61010b610106366004610ae9565b61024d565b005b61012061011b366004610ae9565b610309565b60405190151581526020016100ef565b61010b61013e366004610aa7565b610343565b610120610151366004610ae9565b60036020526000908152604090205460ff1681565b6002546040519081526020016100ef565b610120610185366004610b06565b61046a565b61010b610198366004610ae9565b610481565b61010b61053b565b6101b86101b3366004610ae9565b61054f565b6040516100ef9190610b48565b6100e27f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b03166100e2565b61010b61020b366004610ae9565b610718565b61010b61021e366004610ae9565b6107af565b6002818154811061023357600080fd5b6000918252602090912001546001600160a01b0316905081565b610255610828565b6001600160a01b03811661027c5760405163274338ef60e11b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff166102c05780604051630ed580c760e41b81526004016102b79190610ac0565b60405180910390fd5b6001600160a01b038116600081815260016020526040808220805460ff19169055517fa3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f9190a250565b6001600160a01b03811660009081526001602052604081205460ff168061033d57506000546001600160a01b038381169116145b92915050565b61034b610828565b600254811061036d57604051636d9317c560e01b815260040160405180910390fd5b6000600360006002848154811061038657610386610b8c565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600280546103ca90600190610bb8565b815481106103da576103da610b8c565b600091825260209091200154600280546001600160a01b03909216918390811061040657610406610b8c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600280548061044557610445610bcb565b600082815260209020810160001990810180546001600160a01b031916905501905550565b6000610477848484610882565b90505b9392505050565b610489610828565b6001600160a01b0381166104b05760405163274338ef60e11b815260040160405180910390fd5b6001600160a01b03811660009081526001602052604090205460ff16156104ec578060405163f646f2cd60e01b81526004016102b79190610ac0565b6001600160a01b0381166000818152600160208190526040808320805460ff1916909217909155517f44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e3399190a250565b610543610828565b61054d600061093e565b565b60025460609060009067ffffffffffffffff81111561057057610570610be1565b604051908082528060200260200182016040528015610599578160200160208202803683370190505b5090506000805b60025481101561067d576000600282815481106105bf576105bf610b8c565b6000918252602090912001546040516327e235e360e01b81526001600160a01b03909116906327e235e3906105f8908990600401610ac0565b608060405180830381865afa158015610615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106399190610bf7565b9050806060015115610674576040810151848461065581610c76565b95508151811061066757610667610b8c565b6020026020010181815250505b506001016105a0565b5060008167ffffffffffffffff81111561069957610699610be1565b6040519080825280602002602001820160405280156106c2578160200160208202803683370190505b50905060005b8281101561070f578381815181106106e2576106e2610b8c565b60200260200101518282815181106106fc576106fc610b8c565b60209081029190910101526001016106c8565b50949350505050565b6107213361098e565b6001600160a01b0381166107485760405163f106f2bd60e01b815260040160405180910390fd5b6002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b039093166001600160a01b031990931683179055600091825260036020526040909120805460ff19169091179055565b6107b7610828565b6001600160a01b03811661081c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102b7565b6108258161093e565b50565b6000546001600160a01b0316331461054d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102b7565b6000836001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636352211e856040518263ffffffff1660e01b81526004016108dc91815260200190565b602060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190610c8f565b6001600160a01b0316036109335750600161047a565b6104778484846109e5565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff161580156109c557506000546001600160a01b03828116911614155b156108255780604051636d3f049f60e01b81526004016102b79190610ac0565b6001600160a01b03811660009081526003602052604081205460ff1615610a9d576040516327e235e360e01b81526000906001600160a01b038416906327e235e390610a35908890600401610ac0565b608060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190610bf7565b905080606001518015610a8c5750838160400151145b15610a9b57600191505061047a565b505b5060009392505050565b600060208284031215610ab957600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461082557600080fd5b600060208284031215610afb57600080fd5b813561047a81610ad4565b600080600060608486031215610b1b57600080fd5b8335610b2681610ad4565b9250602084013591506040840135610b3d81610ad4565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b81811015610b8057835183529284019291840191600101610b64565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561033d5761033d610ba2565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060808284031215610c0957600080fd5b6040516080810181811067ffffffffffffffff82111715610c3a57634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526040830151604082015260608301518015158114610c6a57600080fd5b60608201529392505050565b600060018201610c8857610c88610ba2565b5060010190565b600060208284031215610ca157600080fd5b815161047a81610ad456fea2646970667358221220e0afe60db48ca01b3d6219ec0ac92204d3f07999652f4c07a926f470f3273a1664736f6c63430008170033";

type NFTCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTChecker__factory extends ContractFactory {
  constructor(...args: NFTCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTChecker> {
    return super.deploy(_collection, overrides || {}) as Promise<NFTChecker>;
  }
  override getDeployTransaction(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_collection, overrides || {});
  }
  override attach(address: string): NFTChecker {
    return super.attach(address) as NFTChecker;
  }
  override connect(signer: Signer): NFTChecker__factory {
    return super.connect(signer) as NFTChecker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTCheckerInterface {
    return new utils.Interface(_abi) as NFTCheckerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTChecker {
    return new Contract(address, _abi, signerOrProvider) as NFTChecker;
  }
}
