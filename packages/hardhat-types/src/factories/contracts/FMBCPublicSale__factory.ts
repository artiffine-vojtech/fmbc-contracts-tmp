/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FMBCPublicSale,
  FMBCPublicSaleInterface,
} from "../../contracts/FMBCPublicSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_fmbcTokenAddress",
        type: "address",
      },
      {
        internalType: "contract IVesting",
        name: "_vesting",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AmountExceedsAllocation",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectEtherValueSent",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTokenIdOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "TokensBought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fmbcToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAvailableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "togglePause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IVesting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b50604051610ec3380380610ec383398101604081905261002f91610138565b610038336100d0565b6000805460ff60a01b191681558390036100655760405163821f9e4f60e01b815260040160405180910390fd5b6001600160a01b03821661008c5760405163f106f2bd60e01b815260040160405180910390fd5b6001600160a01b0381166100b35760405163f106f2bd60e01b815260040160405180910390fd5b6080929092526001600160a01b0390811660a0521660c05261017b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461013557600080fd5b50565b60008060006060848603121561014d57600080fd5b83519250602084015161015f81610120565b604085015190925061017081610120565b809150509250925092565b60805160a05160c051610cf66101cd6000396000818161010001528181610472015261052b0152600081816101f90152818161035901526104a10152600081816101c501526105fa0152610cf66000f3fe6080604052600436106100b25760003560e01c80638da5cb5b1161006f5780638da5cb5b14610195578063a035b1fe146101b3578063abe1f37d146101e7578063c4ae31681461021b578063d96a094a14610230578063e757223014610243578063f2fde38b1461026357600080fd5b8063398d92bb146100b75780633ccfd60b146100d957806344c63eec146100ee5780635c975abb14610138578063715018a61461015d5780637bb476f514610172575b600080fd5b3480156100c357600080fd5b506100d76100d2366004610b4a565b610283565b005b3480156100e557600080fd5b506100d76102d6565b3480156100fa57600080fd5b506101227f000000000000000000000000000000000000000000000000000000000000000081565b60405161012f9190610b7a565b60405180910390f35b34801561014457600080fd5b5061014d61031b565b604051901515815260200161012f565b34801561016957600080fd5b506100d761032b565b34801561017e57600080fd5b5061018761033f565b60405190815260200161012f565b3480156101a157600080fd5b506000546001600160a01b0316610122565b3480156101bf57600080fd5b506101877f000000000000000000000000000000000000000000000000000000000000000081565b3480156101f357600080fd5b506101227f000000000000000000000000000000000000000000000000000000000000000081565b34801561022757600080fd5b506100d76103d4565b6100d761023e366004610b8e565b6103f9565b34801561024f57600080fd5b5061018761025e366004610b8e565b6105c1565b34801561026f57600080fd5b506100d761027e366004610ba7565b61062f565b61028b6106aa565b816000036102ac5760405163821f9e4f60e01b815260040160405180910390fd5b6102d26102c16000546001600160a01b031690565b6001600160a01b0383169084610704565b5050565b6102de6106aa565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610318573d6000803e3d6000fd5b50565b600054600160a01b900460ff1690565b6103336106aa565b61033d600061075b565b565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061038e903090600401610b7a565b602060405180830381865afa1580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf9190610bcb565b905090565b6103dc6106aa565b6103e461031b565b156103f15761033d6107ab565b61033d6107fa565b61040161083d565b600061040b61033f565b90508082111561042e576040516317ba2feb60e01b815260040160405180910390fd5b6000610439836105c1565b905080341461045b5760405163a75e0e4360e01b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af11580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e9190610be4565b5060405163df7bb46f60e01b8152600481018490523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063df7bb46f90604401600060405180830381600087803b15801561057757600080fd5b505af115801561058b573d6000803e3d6000fd5b50506040518592503391507f745f661b8143944fb883f50694ebed3a871e43c451d9d4bf4648a9d551d7e47a90600090a3505050565b6000670de0b6b3a76400008210156105ec5760405163617ab12d60e11b815260040160405180910390fd5b670de0b6b3a764000061061f7f000000000000000000000000000000000000000000000000000000000000000084610c06565b6106299190610c2b565b92915050565b6106376106aa565b6001600160a01b0381166106a15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103188161075b565b6000546001600160a01b0316331461033d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610698565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610756908490610885565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107b361095a565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516107f09190610b7a565b60405180910390a1565b61080261083d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107e33390565b61084561031b565b1561033d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610698565b60006108da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109a59092919063ffffffff16565b90508051600014806108fb5750808060200190518101906108fb9190610be4565b6107565760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610698565b61096261031b565b61033d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610698565b60606109b484846000856109bc565b949350505050565b606082471015610a1d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610698565b600080866001600160a01b03168587604051610a399190610c71565b60006040518083038185875af1925050503d8060008114610a76576040519150601f19603f3d011682016040523d82523d6000602084013e610a7b565b606091505b5091509150610a8c87838387610a97565b979650505050505050565b60608315610b06578251600003610aff576001600160a01b0385163b610aff5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610698565b50816109b4565b6109b48383815115610b1b5781518083602001fd5b8060405162461bcd60e51b81526004016106989190610c8d565b6001600160a01b038116811461031857600080fd5b60008060408385031215610b5d57600080fd5b823591506020830135610b6f81610b35565b809150509250929050565b6001600160a01b0391909116815260200190565b600060208284031215610ba057600080fd5b5035919050565b600060208284031215610bb957600080fd5b8135610bc481610b35565b9392505050565b600060208284031215610bdd57600080fd5b5051919050565b600060208284031215610bf657600080fd5b81518015158114610bc457600080fd5b808202811582820484141761062957634e487b7160e01b600052601160045260246000fd5b600082610c4857634e487b7160e01b600052601260045260246000fd5b500490565b60005b83811015610c68578181015183820152602001610c50565b50506000910152565b60008251610c83818460208701610c4d565b9190910192915050565b6020815260008251806020840152610cac816040850160208701610c4d565b601f01601f1916919091016040019291505056fea2646970667358221220a974ca3b88ea802a9fa9ee6e7a3f261a89934a4bc07cb4044ba082b3c16b645e64736f6c63430008170033";

type FMBCPublicSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FMBCPublicSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FMBCPublicSale__factory extends ContractFactory {
  constructor(...args: FMBCPublicSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _price: PromiseOrValue<BigNumberish>,
    _fmbcTokenAddress: PromiseOrValue<string>,
    _vesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FMBCPublicSale> {
    return super.deploy(
      _price,
      _fmbcTokenAddress,
      _vesting,
      overrides || {}
    ) as Promise<FMBCPublicSale>;
  }
  override getDeployTransaction(
    _price: PromiseOrValue<BigNumberish>,
    _fmbcTokenAddress: PromiseOrValue<string>,
    _vesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _price,
      _fmbcTokenAddress,
      _vesting,
      overrides || {}
    );
  }
  override attach(address: string): FMBCPublicSale {
    return super.attach(address) as FMBCPublicSale;
  }
  override connect(signer: Signer): FMBCPublicSale__factory {
    return super.connect(signer) as FMBCPublicSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FMBCPublicSaleInterface {
    return new utils.Interface(_abi) as FMBCPublicSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FMBCPublicSale {
    return new Contract(address, _abi, signerOrProvider) as FMBCPublicSale;
  }
}
