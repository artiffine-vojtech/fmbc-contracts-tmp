/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BatchTransfer,
  BatchTransferInterface,
} from "../../contracts/BatchTransfer";

const _abi = [
  {
    inputs: [],
    name: "ArgumentIsZero",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "MismatchedArrayLengths",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "batchTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105c58061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063398d92bb146100675780633ccfd60b1461007c578063715018a6146100845780638da5cb5b1461008c578063bb0a64b6146100ab578063f2fde38b146100be575b600080fd5b61007a610075366004610433565b6100d1565b005b61007a610191565b61007a6101d6565b600054604080516001600160a01b039092168252519081900360200190f35b61007a6100b93660046104af565b6101ea565b61007a6100cc366004610533565b6102fe565b6100d9610374565b816000036100fa5760405163821f9e4f60e01b815260040160405180910390fd5b806001600160a01b031663a9059cbb61011b6000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018c9190610557565b505050565b610199610374565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156101d3573d6000803e3d6000fd5b50565b6101de610374565b6101e860006103ce565b565b83821461021957604051633adf150f60e21b815260048101859052602481018390526044015b60405180910390fd5b60005b848110156102f657816001600160a01b03166323b872dd3388888581811061024657610246610579565b905060200201602081019061025b9190610533565b87878681811061026d5761026d610579565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152506020909102013560448201526064016020604051808303816000875af11580156102c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ed9190610557565b5060010161021c565b505050505050565b610306610374565b6001600160a01b03811661036b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610210565b6101d3816103ce565b6000546001600160a01b031633146101e85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610210565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146101d357600080fd5b6000806040838503121561044657600080fd5b8235915060208301356104588161041e565b809150509250929050565b60008083601f84011261047557600080fd5b50813567ffffffffffffffff81111561048d57600080fd5b6020830191508360208260051b85010111156104a857600080fd5b9250929050565b6000806000806000606086880312156104c757600080fd5b853567ffffffffffffffff808211156104df57600080fd5b6104eb89838a01610463565b9097509550602088013591508082111561050457600080fd5b5061051188828901610463565b90945092505060408601356105258161041e565b809150509295509295909350565b60006020828403121561054557600080fd5b81356105508161041e565b9392505050565b60006020828403121561056957600080fd5b8151801515811461055057600080fd5b634e487b7160e01b600052603260045260246000fdfea26469706673582212206f77c50a60f15b8909aedbcdbe22613b05e2df8c6d4bce90050755ae68f2f19864736f6c63430008170033";

type BatchTransferConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchTransferConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchTransfer__factory extends ContractFactory {
  constructor(...args: BatchTransferConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BatchTransfer> {
    return super.deploy(overrides || {}) as Promise<BatchTransfer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BatchTransfer {
    return super.attach(address) as BatchTransfer;
  }
  override connect(signer: Signer): BatchTransfer__factory {
    return super.connect(signer) as BatchTransfer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchTransferInterface {
    return new utils.Interface(_abi) as BatchTransferInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchTransfer {
    return new Contract(address, _abi, signerOrProvider) as BatchTransfer;
  }
}
