/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FMBCMemberSale,
  FMBCMemberSaleInterface,
} from "../../../contracts/FMBCMemberSale.sol/FMBCMemberSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_baseAllocation",
        type: "uint256",
      },
      {
        internalType: "contract INFTWithLevel",
        name: "_memberNFTContractAddress",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_fmbcTokenAddress",
        type: "address",
      },
      {
        internalType: "contract IVesting",
        name: "_vesting",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AmountExceedsAllocation",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectEtherValueSent",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTokenIdOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "TokensBought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "baseAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fmbcToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getAvailableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "memberNFT",
    outputs: [
      {
        internalType: "contract INFTWithLevel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "togglePause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokensBoughtByTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IVesting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040523480156200001257600080fd5b50604051620013403803806200134083398101604081905262000035916200019c565b620000403362000133565b6000805460ff60a01b191681558590036200006e5760405163821f9e4f60e01b815260040160405180910390fd5b83600003620000905760405163821f9e4f60e01b815260040160405180910390fd5b6001600160a01b038316620000b85760405163f106f2bd60e01b815260040160405180910390fd5b6001600160a01b038216620000e05760405163f106f2bd60e01b815260040160405180910390fd5b6001600160a01b038116620001085760405163f106f2bd60e01b815260040160405180910390fd5b60809490945260a0929092526001600160a01b0390811660c05290811660e052166101005262000204565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200019957600080fd5b50565b600080600080600060a08688031215620001b557600080fd5b85519450602086015193506040860151620001d08162000183565b6060870151909350620001e38162000183565b6080870151909250620001f68162000183565b809150509295509295909350565b60805160a05160c05160e051610100516110bf6200028160003960008181610121015281816106a801526107610152600081816102390152818161049701526106d70152600081816101c3015281816105810152610a99015260008181610282015261043d0152600081816101f7015261083301526110bf6000f3fe6080604052600436106100d35760003560e01c8063abe1f37d1161007a578063abe1f37d14610227578063c4ae31681461025b578063c4bfce1814610270578063ca57dd7b146102a4578063d5c14391146102d1578063d6febde8146102f1578063e757223014610304578063f2fde38b1461032457600080fd5b8063398d92bb146100d85780633ccfd60b146100fa57806344c63eec1461010f5780635c975abb14610159578063715018a61461017e5780638da5cb5b146101935780638e851a7c146101b1578063a035b1fe146101e5575b600080fd5b3480156100e457600080fd5b506100f86100f3366004610ea6565b610344565b005b34801561010657600080fd5b506100f8610397565b34801561011b57600080fd5b506101437f000000000000000000000000000000000000000000000000000000000000000081565b6040516101509190610ed6565b60405180910390f35b34801561016557600080fd5b5061016e6103dc565b6040519015158152602001610150565b34801561018a57600080fd5b506100f86103ec565b34801561019f57600080fd5b506000546001600160a01b0316610143565b3480156101bd57600080fd5b506101437f000000000000000000000000000000000000000000000000000000000000000081565b3480156101f157600080fd5b506102197f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610150565b34801561023357600080fd5b506101437f000000000000000000000000000000000000000000000000000000000000000081565b34801561026757600080fd5b506100f8610400565b34801561027c57600080fd5b506102197f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b057600080fd5b506102196102bf366004610eea565b60016020526000908152604090205481565b3480156102dd57600080fd5b506102196102ec366004610eea565b610425565b6100f86102ff366004610f03565b610559565b34801561031057600080fd5b5061021961031f366004610eea565b6107fa565b34801561033057600080fd5b506100f861033f366004610f25565b610868565b61034c6108e3565b8160000361036d5760405163821f9e4f60e01b815260040160405180910390fd5b6103936103826000546001600160a01b031690565b6001600160a01b038316908461093d565b5050565b61039f6108e3565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f193505050501580156103d9573d6000803e3d6000fd5b50565b600054600160a01b900460ff1690565b6103f46108e3565b6103fe6000610994565b565b6104086108e3565b6104106103dc565b1561041d576103fe6109e4565b6103fe610a33565b60008061043183610a76565b90506000600a610461837f0000000000000000000000000000000000000000000000000000000000000000610f5f565b61046b9190610f76565b6000858152600160205260409020549091508082111561054e5760006104918284610f98565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104e19190610ed6565b602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610fab565b905080821061052f578091505b670de0b6b3a764000082101561054457600091505b5095945050505050565b506000949350505050565b610561610b99565b6040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156105c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ec9190610fc4565b6001600160a01b03161461061357604051635e11e7b360e01b815260040160405180910390fd5b600061061e82610425565b905080831115610641576040516317ba2feb60e01b815260040160405180910390fd5b600061064c846107fa565b905080341461066e5760405163a75e0e4360e01b815260040160405180910390fd5b6000838152600160205260408120805486929061068c908490610fe1565b909155505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107449190610ff4565b5060405163df7bb46f60e01b8152600481018590523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063df7bb46f90604401600060405180830381600087803b1580156107ad57600080fd5b505af11580156107c1573d6000803e3d6000fd5b505060405186925085915033907f8442948036198f1146d3a63c3db355d7e0295c2cc5676c755990445da4fdc1c990600090a450505050565b6000670de0b6b3a76400008210156108255760405163617ab12d60e11b815260040160405180910390fd5b670de0b6b3a76400006108587f000000000000000000000000000000000000000000000000000000000000000084610f5f565b6108629190610f76565b92915050565b6108706108e3565b6001600160a01b0381166108da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6103d981610994565b6000546001600160a01b031633146103fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108d1565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261098f908490610be1565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6109ec610cb6565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610a299190610ed6565b60405180910390a1565b610a3b610b99565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a1c3390565b604051630284a7a560e51b81526004810182905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635094f4a090602401602060405180830381865afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b049190610fab565b905080600003610b175750603292915050565b80600103610b285750602892915050565b80600203610b395750601e92915050565b80600303610b4a5750601492915050565b80600403610b5b5750600f92915050565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d1bdad95b881b195d995b606a1b60448201526064016108d1565b610ba16103dc565b156103fe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108d1565b6000610c36826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d019092919063ffffffff16565b9050805160001480610c57575080806020019051810190610c579190610ff4565b61098f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108d1565b610cbe6103dc565b6103fe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016108d1565b6060610d108484600085610d18565b949350505050565b606082471015610d795760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108d1565b600080866001600160a01b03168587604051610d95919061103a565b60006040518083038185875af1925050503d8060008114610dd2576040519150601f19603f3d011682016040523d82523d6000602084013e610dd7565b606091505b5091509150610de887838387610df3565b979650505050505050565b60608315610e62578251600003610e5b576001600160a01b0385163b610e5b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108d1565b5081610d10565b610d108383815115610e775781518083602001fd5b8060405162461bcd60e51b81526004016108d19190611056565b6001600160a01b03811681146103d957600080fd5b60008060408385031215610eb957600080fd5b823591506020830135610ecb81610e91565b809150509250929050565b6001600160a01b0391909116815260200190565b600060208284031215610efc57600080fd5b5035919050565b60008060408385031215610f1657600080fd5b50508035926020909101359150565b600060208284031215610f3757600080fd5b8135610f4281610e91565b9392505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761086257610862610f49565b600082610f9357634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561086257610862610f49565b600060208284031215610fbd57600080fd5b5051919050565b600060208284031215610fd657600080fd5b8151610f4281610e91565b8082018082111561086257610862610f49565b60006020828403121561100657600080fd5b81518015158114610f4257600080fd5b60005b83811015611031578181015183820152602001611019565b50506000910152565b6000825161104c818460208701611016565b9190910192915050565b6020815260008251806020840152611075816040850160208701611016565b601f01601f1916919091016040019291505056fea2646970667358221220b6192a57acf3fa7460f9abb25856b3e1bff665d8b4b278eb80fa3b883bf8c9e764736f6c63430008170033";

type FMBCMemberSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FMBCMemberSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FMBCMemberSale__factory extends ContractFactory {
  constructor(...args: FMBCMemberSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _price: PromiseOrValue<BigNumberish>,
    _baseAllocation: PromiseOrValue<BigNumberish>,
    _memberNFTContractAddress: PromiseOrValue<string>,
    _fmbcTokenAddress: PromiseOrValue<string>,
    _vesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FMBCMemberSale> {
    return super.deploy(
      _price,
      _baseAllocation,
      _memberNFTContractAddress,
      _fmbcTokenAddress,
      _vesting,
      overrides || {}
    ) as Promise<FMBCMemberSale>;
  }
  override getDeployTransaction(
    _price: PromiseOrValue<BigNumberish>,
    _baseAllocation: PromiseOrValue<BigNumberish>,
    _memberNFTContractAddress: PromiseOrValue<string>,
    _fmbcTokenAddress: PromiseOrValue<string>,
    _vesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _price,
      _baseAllocation,
      _memberNFTContractAddress,
      _fmbcTokenAddress,
      _vesting,
      overrides || {}
    );
  }
  override attach(address: string): FMBCMemberSale {
    return super.attach(address) as FMBCMemberSale;
  }
  override connect(signer: Signer): FMBCMemberSale__factory {
    return super.connect(signer) as FMBCMemberSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FMBCMemberSaleInterface {
    return new utils.Interface(_abi) as FMBCMemberSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FMBCMemberSale {
    return new Contract(address, _abi, signerOrProvider) as FMBCMemberSale;
  }
}
