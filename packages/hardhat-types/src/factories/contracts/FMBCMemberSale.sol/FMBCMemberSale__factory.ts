/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FMBCMemberSale,
  FMBCMemberSaleInterface,
} from "../../../contracts/FMBCMemberSale.sol/FMBCMemberSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_baseAllocation",
        type: "uint256",
      },
      {
        internalType: "contract INFTWithLevel",
        name: "_memberNFTContractAddress",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_fmbcTokenAddress",
        type: "address",
      },
      {
        internalType: "contract IVesting",
        name: "_vesting",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AmountExceedsAllocation",
    type: "error",
  },
  {
    inputs: [],
    name: "AmountTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsAddressZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ArgumentIsZero",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectEtherValueSent",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongTokenIdOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId_",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "TokensBought",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "baseAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "fmbcToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "getAvailableAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "memberNFT",
    outputs: [
      {
        internalType: "contract INFTWithLevel",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "togglePause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tokensBoughtByTokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vesting",
    outputs: [
      {
        internalType: "contract IVesting",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040523480156200001257600080fd5b506040516200135a3803806200135a83398101604081905262000035916200019c565b620000403362000133565b6000805460ff60a01b191681558590036200006e5760405163821f9e4f60e01b815260040160405180910390fd5b83600003620000905760405163821f9e4f60e01b815260040160405180910390fd5b6001600160a01b038316620000b85760405163f106f2bd60e01b815260040160405180910390fd5b6001600160a01b038216620000e05760405163f106f2bd60e01b815260040160405180910390fd5b6001600160a01b038116620001085760405163f106f2bd60e01b815260040160405180910390fd5b60809490945260a0929092526001600160a01b0390811660c05290811660e052166101005262000204565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200019957600080fd5b50565b600080600080600060a08688031215620001b557600080fd5b85519450602086015193506040860151620001d08162000183565b6060870151909350620001e38162000183565b6080870151909250620001f68162000183565b809150509295509295909350565b60805160a05160c05160e051610100516110d96200028160003960008181610141015281816106c6015261077f015260008181610265015281816104d501526106f50152600081816101ef0152818161059f0152610abd0152600081816102ae015261045e015260008181610223015261085101526110d96000f3fe6080604052600436106100f35760003560e01c8063abe1f37d1161008a578063d5c1439111610059578063d5c14391146102fd578063d6febde81461031d578063e757223014610330578063f2fde38b1461035057600080fd5b8063abe1f37d14610253578063c4ae316814610287578063c4bfce181461029c578063ca57dd7b146102d057600080fd5b8063715018a6116100c6578063715018a6146101aa5780638da5cb5b146101bf5780638e851a7c146101dd578063a035b1fe1461021157600080fd5b8063398d92bb146100f85780633ccfd60b1461011a57806344c63eec1461012f5780635c975abb14610180575b600080fd5b34801561010457600080fd5b50610118610113366004610ed4565b610370565b005b34801561012657600080fd5b506101186103c3565b34801561013b57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561018c57600080fd5b50600054600160a01b900460ff166040519015158152602001610177565b3480156101b657600080fd5b50610118610408565b3480156101cb57600080fd5b506000546001600160a01b0316610163565b3480156101e957600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b34801561021d57600080fd5b506102457f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610177565b34801561025f57600080fd5b506101637f000000000000000000000000000000000000000000000000000000000000000081565b34801561029357600080fd5b5061011861041c565b3480156102a857600080fd5b506102457f000000000000000000000000000000000000000000000000000000000000000081565b3480156102dc57600080fd5b506102456102eb366004610f04565b60016020526000908152604090205481565b34801561030957600080fd5b50610245610318366004610f04565b610446565b61011861032b366004610f1d565b610577565b34801561033c57600080fd5b5061024561034b366004610f04565b610818565b34801561035c57600080fd5b5061011861036b366004610f3f565b610886565b610378610901565b816000036103995760405163821f9e4f60e01b815260040160405180910390fd5b6103bf6103ae6000546001600160a01b031690565b6001600160a01b038316908461095b565b5050565b6103cb610901565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f19350505050158015610405573d6000803e3d6000fd5b50565b610410610901565b61041a60006109b2565b565b610424610901565b600054600160a01b900460ff161561043e5761041a610a02565b61041a610a57565b60008061045283610a9a565b90506000600a610482837f0000000000000000000000000000000000000000000000000000000000000000610f79565b61048c9190610f90565b6000858152600160205260409020549091508082111561056c5760006104b28284610fb2565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190610fc5565b905080821061054d578091505b670de0b6b3a764000082101561056257600091505b5095945050505050565b506000949350505050565b61057f610bbd565b6040516331a9108f60e11b81526004810182905233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156105e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060a9190610fde565b6001600160a01b03161461063157604051635e11e7b360e01b815260040160405180910390fd5b600061063c82610446565b90508083111561065f576040516317ba2feb60e01b815260040160405180910390fd5b600061066a84610818565b905080341461068c5760405163a75e0e4360e01b815260040160405180910390fd5b600083815260016020526040812080548692906106aa908490610ffb565b909155505060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b3906044016020604051808303816000875af115801561073e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610762919061100e565b5060405163df7bb46f60e01b8152600481018590523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063df7bb46f90604401600060405180830381600087803b1580156107cb57600080fd5b505af11580156107df573d6000803e3d6000fd5b505060405186925085915033907f8442948036198f1146d3a63c3db355d7e0295c2cc5676c755990445da4fdc1c990600090a450505050565b6000670de0b6b3a76400008210156108435760405163617ab12d60e11b815260040160405180910390fd5b670de0b6b3a76400006108767f000000000000000000000000000000000000000000000000000000000000000084610f79565b6108809190610f90565b92915050565b61088e610901565b6001600160a01b0381166108f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610405816109b2565b6000546001600160a01b0316331461041a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016108ef565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526109ad908490610c0a565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610a0a610cdf565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610a5f610bbd565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610a3a3390565b604051630284a7a560e51b81526004810182905260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635094f4a090602401602060405180830381865afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b289190610fc5565b905080600003610b3b5750603292915050565b80600103610b4c5750602892915050565b80600203610b5d5750601e92915050565b80600303610b6e5750601492915050565b80600403610b7f5750600f92915050565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d1bdad95b881b195d995b606a1b60448201526064016108ef565b600054600160a01b900460ff161561041a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016108ef565b6000610c5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d2f9092919063ffffffff16565b9050805160001480610c80575080806020019051810190610c80919061100e565b6109ad5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108ef565b600054600160a01b900460ff1661041a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016108ef565b6060610d3e8484600085610d46565b949350505050565b606082471015610da75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108ef565b600080866001600160a01b03168587604051610dc39190611054565b60006040518083038185875af1925050503d8060008114610e00576040519150601f19603f3d011682016040523d82523d6000602084013e610e05565b606091505b5091509150610e1687838387610e21565b979650505050505050565b60608315610e90578251600003610e89576001600160a01b0385163b610e895760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ef565b5081610d3e565b610d3e8383815115610ea55781518083602001fd5b8060405162461bcd60e51b81526004016108ef9190611070565b6001600160a01b038116811461040557600080fd5b60008060408385031215610ee757600080fd5b823591506020830135610ef981610ebf565b809150509250929050565b600060208284031215610f1657600080fd5b5035919050565b60008060408385031215610f3057600080fd5b50508035926020909101359150565b600060208284031215610f5157600080fd5b8135610f5c81610ebf565b9392505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761088057610880610f63565b600082610fad57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561088057610880610f63565b600060208284031215610fd757600080fd5b5051919050565b600060208284031215610ff057600080fd5b8151610f5c81610ebf565b8082018082111561088057610880610f63565b60006020828403121561102057600080fd5b81518015158114610f5c57600080fd5b60005b8381101561104b578181015183820152602001611033565b50506000910152565b60008251611066818460208701611030565b9190910192915050565b602081526000825180602084015261108f816040850160208701611030565b601f01601f1916919091016040019291505056fea2646970667358221220bc2c3d40c5f5ff53b7f2dd473b92250abbc9423a846c30b90a5a1945fff8798a64736f6c63430008170033";

type FMBCMemberSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FMBCMemberSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FMBCMemberSale__factory extends ContractFactory {
  constructor(...args: FMBCMemberSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _price: PromiseOrValue<BigNumberish>,
    _baseAllocation: PromiseOrValue<BigNumberish>,
    _memberNFTContractAddress: PromiseOrValue<string>,
    _fmbcTokenAddress: PromiseOrValue<string>,
    _vesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FMBCMemberSale> {
    return super.deploy(
      _price,
      _baseAllocation,
      _memberNFTContractAddress,
      _fmbcTokenAddress,
      _vesting,
      overrides || {}
    ) as Promise<FMBCMemberSale>;
  }
  override getDeployTransaction(
    _price: PromiseOrValue<BigNumberish>,
    _baseAllocation: PromiseOrValue<BigNumberish>,
    _memberNFTContractAddress: PromiseOrValue<string>,
    _fmbcTokenAddress: PromiseOrValue<string>,
    _vesting: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _price,
      _baseAllocation,
      _memberNFTContractAddress,
      _fmbcTokenAddress,
      _vesting,
      overrides || {}
    );
  }
  override attach(address: string): FMBCMemberSale {
    return super.attach(address) as FMBCMemberSale;
  }
  override connect(signer: Signer): FMBCMemberSale__factory {
    return super.connect(signer) as FMBCMemberSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FMBCMemberSaleInterface {
    return new utils.Interface(_abi) as FMBCMemberSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FMBCMemberSale {
    return new Contract(address, _abi, signerOrProvider) as FMBCMemberSale;
  }
}
