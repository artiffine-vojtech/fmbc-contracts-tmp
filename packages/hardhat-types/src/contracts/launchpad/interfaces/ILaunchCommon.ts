/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILaunchCommonInterface extends utils.Interface {
  functions: {};

  events: {
    "ControllerFactorySet(address)": EventFragment;
    "DexProviderAdded(uint256,address)": EventFragment;
    "FomoICSet(address)": EventFragment;
    "HardCapReached(uint256)": EventFragment;
    "LaunchCreated(string,string,uint256)": EventFragment;
    "Pledged(uint256,address,uint256,uint256)": EventFragment;
    "PledgedWithNFT(uint256,address,uint256,uint256,uint256)": EventFragment;
    "SteakICSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllerFactorySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexProviderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FomoICSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HardCapReached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LaunchCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pledged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PledgedWithNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SteakICSet"): EventFragment;
}

export interface ControllerFactorySetEventObject {
  factory: string;
}
export type ControllerFactorySetEvent = TypedEvent<
  [string],
  ControllerFactorySetEventObject
>;

export type ControllerFactorySetEventFilter =
  TypedEventFilter<ControllerFactorySetEvent>;

export interface DexProviderAddedEventObject {
  index: BigNumber;
  provider: string;
}
export type DexProviderAddedEvent = TypedEvent<
  [BigNumber, string],
  DexProviderAddedEventObject
>;

export type DexProviderAddedEventFilter =
  TypedEventFilter<DexProviderAddedEvent>;

export interface FomoICSetEventObject {
  ic: string;
}
export type FomoICSetEvent = TypedEvent<[string], FomoICSetEventObject>;

export type FomoICSetEventFilter = TypedEventFilter<FomoICSetEvent>;

export interface HardCapReachedEventObject {
  launchId: BigNumber;
}
export type HardCapReachedEvent = TypedEvent<
  [BigNumber],
  HardCapReachedEventObject
>;

export type HardCapReachedEventFilter = TypedEventFilter<HardCapReachedEvent>;

export interface LaunchCreatedEventObject {
  name: string;
  symbol: string;
  launchId: BigNumber;
}
export type LaunchCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  LaunchCreatedEventObject
>;

export type LaunchCreatedEventFilter = TypedEventFilter<LaunchCreatedEvent>;

export interface PledgedEventObject {
  launchId: BigNumber;
  user: string;
  amountLP: BigNumber;
  amountUsdc: BigNumber;
}
export type PledgedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PledgedEventObject
>;

export type PledgedEventFilter = TypedEventFilter<PledgedEvent>;

export interface PledgedWithNFTEventObject {
  launchId: BigNumber;
  user: string;
  amountLP: BigNumber;
  amountUsdc: BigNumber;
  nftId: BigNumber;
}
export type PledgedWithNFTEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  PledgedWithNFTEventObject
>;

export type PledgedWithNFTEventFilter = TypedEventFilter<PledgedWithNFTEvent>;

export interface SteakICSetEventObject {
  ic: string;
}
export type SteakICSetEvent = TypedEvent<[string], SteakICSetEventObject>;

export type SteakICSetEventFilter = TypedEventFilter<SteakICSetEvent>;

export interface ILaunchCommon extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILaunchCommonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ControllerFactorySet(address)"(
      factory?: PromiseOrValue<string> | null
    ): ControllerFactorySetEventFilter;
    ControllerFactorySet(
      factory?: PromiseOrValue<string> | null
    ): ControllerFactorySetEventFilter;

    "DexProviderAdded(uint256,address)"(
      index?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null
    ): DexProviderAddedEventFilter;
    DexProviderAdded(
      index?: PromiseOrValue<BigNumberish> | null,
      provider?: PromiseOrValue<string> | null
    ): DexProviderAddedEventFilter;

    "FomoICSet(address)"(
      ic?: PromiseOrValue<string> | null
    ): FomoICSetEventFilter;
    FomoICSet(ic?: PromiseOrValue<string> | null): FomoICSetEventFilter;

    "HardCapReached(uint256)"(
      launchId?: PromiseOrValue<BigNumberish> | null
    ): HardCapReachedEventFilter;
    HardCapReached(
      launchId?: PromiseOrValue<BigNumberish> | null
    ): HardCapReachedEventFilter;

    "LaunchCreated(string,string,uint256)"(
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null,
      launchId?: PromiseOrValue<BigNumberish> | null
    ): LaunchCreatedEventFilter;
    LaunchCreated(
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null,
      launchId?: PromiseOrValue<BigNumberish> | null
    ): LaunchCreatedEventFilter;

    "Pledged(uint256,address,uint256,uint256)"(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null
    ): PledgedEventFilter;
    Pledged(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null
    ): PledgedEventFilter;

    "PledgedWithNFT(uint256,address,uint256,uint256,uint256)"(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): PledgedWithNFTEventFilter;
    PledgedWithNFT(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): PledgedWithNFTEventFilter;

    "SteakICSet(address)"(
      ic?: PromiseOrValue<string> | null
    ): SteakICSetEventFilter;
    SteakICSet(ic?: PromiseOrValue<string> | null): SteakICSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
