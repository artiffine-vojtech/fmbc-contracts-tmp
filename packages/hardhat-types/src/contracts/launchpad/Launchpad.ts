/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ILaunchCommon {
  export type LaunchConfigVarsStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    totalSupply: PromiseOrValue<BigNumberish>;
    hardCap: PromiseOrValue<BigNumberish>;
    team: PromiseOrValue<string>;
    x: PromiseOrValue<string>;
    allocations: PromiseOrValue<BigNumberish>[];
    rewardsAllocations: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    rounds: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    dexIndex: PromiseOrValue<BigNumberish>;
    steakTeamFee: PromiseOrValue<BigNumberish>;
  };

  export type LaunchConfigVarsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber[],
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    [BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber
  ] & {
    name: string;
    symbol: string;
    totalSupply: BigNumber;
    hardCap: BigNumber;
    team: string;
    x: string;
    allocations: BigNumber[];
    rewardsAllocations: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    rounds: [BigNumber, BigNumber, BigNumber];
    dexIndex: BigNumber;
    steakTeamFee: BigNumber;
  };

  export type LaunchConfigStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    dexProvider: PromiseOrValue<string>;
    team: PromiseOrValue<string>;
    x: PromiseOrValue<string>;
    allocations: PromiseOrValue<BigNumberish>[];
    rewardsAllocations: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    values: PromiseOrValue<BigNumberish>[];
    status: PromiseOrValue<BigNumberish>;
  };

  export type LaunchConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber[],
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber[],
    number
  ] & {
    name: string;
    symbol: string;
    dexProvider: string;
    team: string;
    x: string;
    allocations: BigNumber[];
    rewardsAllocations: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    values: BigNumber[];
    status: number;
  };
}

export interface LaunchpadInterface extends utils.Interface {
  functions: {
    "CONTROLLER_FACTORY()": FunctionFragment;
    "FOMO()": FunctionFragment;
    "LAUNCH_FEE()": FunctionFragment;
    "PLATFORM_MEME_FEE()": FunctionFragment;
    "PLATFORM_STEAK_FEE()": FunctionFragment;
    "USDC()": FunctionFragment;
    "USDC_MAX()": FunctionFragment;
    "USDC_MIN()": FunctionFragment;
    "USDC_SOFT_CAP()": FunctionFragment;
    "addDexProvider(address)": FunctionFragment;
    "claimTokens(uint256)": FunctionFragment;
    "createLaunch((string,string,uint256,uint256,address,address,uint256[6],uint256[5],uint256[3],uint256,uint256),bool,bytes)": FunctionFragment;
    "dexProviders(uint256)": FunctionFragment;
    "fomoIC()": FunctionFragment;
    "fomoUsdcLp()": FunctionFragment;
    "getFundsBack(uint256,bool)": FunctionFragment;
    "getLaunchConfig(uint256)": FunctionFragment;
    "identityVerifier()": FunctionFragment;
    "isKOL(address)": FunctionFragment;
    "kolAddresses(uint256)": FunctionFragment;
    "launch(uint256)": FunctionFragment;
    "launchToNFTPledge(uint256,uint256)": FunctionFragment;
    "launchToUserPledge(uint256,address)": FunctionFragment;
    "launches(uint256)": FunctionFragment;
    "memberNFT()": FunctionFragment;
    "nftChecker()": FunctionFragment;
    "owner()": FunctionFragment;
    "pledge(uint256,uint256,bool,bytes)": FunctionFragment;
    "pledgeWithNFT(uint256,uint256,bool,uint256,address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setControllerFactory(address)": FunctionFragment;
    "setFomoIC(address)": FunctionFragment;
    "setKolAddresses(address[],bool[])": FunctionFragment;
    "setMemePlatformFee(uint256)": FunctionFragment;
    "setPledgeLimits(uint256,uint256)": FunctionFragment;
    "setSoftCapAndFees(uint256,uint256)": FunctionFragment;
    "setSteakIC(address)": FunctionFragment;
    "setSteakPlatformFee(uint256)": FunctionFragment;
    "steakIC()": FunctionFragment;
    "tokenAddresses(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTROLLER_FACTORY"
      | "FOMO"
      | "LAUNCH_FEE"
      | "PLATFORM_MEME_FEE"
      | "PLATFORM_STEAK_FEE"
      | "USDC"
      | "USDC_MAX"
      | "USDC_MIN"
      | "USDC_SOFT_CAP"
      | "addDexProvider"
      | "claimTokens"
      | "createLaunch"
      | "dexProviders"
      | "fomoIC"
      | "fomoUsdcLp"
      | "getFundsBack"
      | "getLaunchConfig"
      | "identityVerifier"
      | "isKOL"
      | "kolAddresses"
      | "launch"
      | "launchToNFTPledge"
      | "launchToUserPledge"
      | "launches"
      | "memberNFT"
      | "nftChecker"
      | "owner"
      | "pledge"
      | "pledgeWithNFT"
      | "renounceOwnership"
      | "setControllerFactory"
      | "setFomoIC"
      | "setKolAddresses"
      | "setMemePlatformFee"
      | "setPledgeLimits"
      | "setSoftCapAndFees"
      | "setSteakIC"
      | "setSteakPlatformFee"
      | "steakIC"
      | "tokenAddresses"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTROLLER_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FOMO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LAUNCH_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_MEME_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_STEAK_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC_MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC_MIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "USDC_SOFT_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDexProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLaunch",
    values: [
      ILaunchCommon.LaunchConfigVarsStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dexProviders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fomoIC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fomoUsdcLp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundsBack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLaunchConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "identityVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isKOL",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "kolAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "launch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "launchToNFTPledge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "launchToUserPledge",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "launches",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "memberNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftChecker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgeWithNFT",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFomoIC",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKolAddresses",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setMemePlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPledgeLimits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSoftCapAndFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSteakIC",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSteakPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "steakIC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTROLLER_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FOMO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LAUNCH_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_MEME_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_STEAK_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC_MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC_MIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "USDC_SOFT_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDexProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLaunch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fomoIC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fomoUsdcLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFundsBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLaunchConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isKOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kolAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "launchToNFTPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchToUserPledge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "launches", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "memberNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftChecker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgeWithNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllerFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFomoIC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKolAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMemePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPledgeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSoftCapAndFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSteakIC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSteakPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "steakIC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "HardCapReached(uint256)": EventFragment;
    "LaunchCreated(string,string,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pledged(uint256,address,uint256,uint256)": EventFragment;
    "PledgedWithNFT(uint256,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HardCapReached"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LaunchCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pledged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PledgedWithNFT"): EventFragment;
}

export interface HardCapReachedEventObject {
  launchId: BigNumber;
}
export type HardCapReachedEvent = TypedEvent<
  [BigNumber],
  HardCapReachedEventObject
>;

export type HardCapReachedEventFilter = TypedEventFilter<HardCapReachedEvent>;

export interface LaunchCreatedEventObject {
  name: string;
  symbol: string;
  launchId: BigNumber;
}
export type LaunchCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  LaunchCreatedEventObject
>;

export type LaunchCreatedEventFilter = TypedEventFilter<LaunchCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PledgedEventObject {
  launchId: BigNumber;
  user: string;
  amountLP: BigNumber;
  amountUsdc: BigNumber;
}
export type PledgedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  PledgedEventObject
>;

export type PledgedEventFilter = TypedEventFilter<PledgedEvent>;

export interface PledgedWithNFTEventObject {
  launchId: BigNumber;
  user: string;
  amountLP: BigNumber;
  amountUsdc: BigNumber;
  nftId: BigNumber;
}
export type PledgedWithNFTEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  PledgedWithNFTEventObject
>;

export type PledgedWithNFTEventFilter = TypedEventFilter<PledgedWithNFTEvent>;

export interface Launchpad extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaunchpadInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTROLLER_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    FOMO(overrides?: CallOverrides): Promise<[string]>;

    LAUNCH_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PLATFORM_MEME_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PLATFORM_STEAK_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    USDC_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC_SOFT_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    addDexProvider(
      _dexProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLaunch(
      _config: ILaunchCommon.LaunchConfigVarsStruct,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexProviders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fomoIC(overrides?: CallOverrides): Promise<[string]>;

    fomoUsdcLp(overrides?: CallOverrides): Promise<[string]>;

    getFundsBack(
      _launchId: PromiseOrValue<BigNumberish>,
      _stake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLaunchConfig(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILaunchCommon.LaunchConfigStructOutput]>;

    identityVerifier(overrides?: CallOverrides): Promise<[string]>;

    isKOL(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    launch(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    launchToNFTPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        lp: BigNumber;
        usdc: BigNumber;
        claimed: boolean;
      }
    >;

    launchToUserPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        lp: BigNumber;
        usdc: BigNumber;
        claimed: boolean;
      }
    >;

    launches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, number] & {
        name: string;
        symbol: string;
        dexProvider: string;
        team: string;
        x: string;
        status: number;
      }
    >;

    memberNFT(overrides?: CallOverrides): Promise<[string]>;

    nftChecker(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pledge(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pledgeWithNFT(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _nftId: PromiseOrValue<BigNumberish>,
      _controllerWithNFT: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setControllerFactory(
      _controllerFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFomoIC(
      _fomoIC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKolAddresses(
      _kolAddresses: PromiseOrValue<string>[],
      _isKol: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMemePlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPledgeLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSoftCapAndFees(
      _softCap: PromiseOrValue<BigNumberish>,
      _launchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSteakIC(
      _steakIC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSteakPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    steakIC(overrides?: CallOverrides): Promise<[string]>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        usdc: BigNumber;
        fomo: BigNumber;
        token: string;
        fomoLP: string;
        usdcLP: string;
        tokenIC: string;
        tokenICProxy: string;
        fomoLPIC: string;
        usdcLPIC: string;
        vesting: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CONTROLLER_FACTORY(overrides?: CallOverrides): Promise<string>;

  FOMO(overrides?: CallOverrides): Promise<string>;

  LAUNCH_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PLATFORM_MEME_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PLATFORM_STEAK_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  USDC_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  USDC_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  USDC_SOFT_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  addDexProvider(
    _dexProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    _launchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLaunch(
    _config: ILaunchCommon.LaunchConfigVarsStruct,
    _staked: PromiseOrValue<boolean>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexProviders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  fomoIC(overrides?: CallOverrides): Promise<string>;

  fomoUsdcLp(overrides?: CallOverrides): Promise<string>;

  getFundsBack(
    _launchId: PromiseOrValue<BigNumberish>,
    _stake: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLaunchConfig(
    _launchId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILaunchCommon.LaunchConfigStructOutput>;

  identityVerifier(overrides?: CallOverrides): Promise<string>;

  isKOL(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kolAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  launch(
    _launchId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  launchToNFTPledge(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      lp: BigNumber;
      usdc: BigNumber;
      claimed: boolean;
    }
  >;

  launchToUserPledge(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      lp: BigNumber;
      usdc: BigNumber;
      claimed: boolean;
    }
  >;

  launches(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, number] & {
      name: string;
      symbol: string;
      dexProvider: string;
      team: string;
      x: string;
      status: number;
    }
  >;

  memberNFT(overrides?: CallOverrides): Promise<string>;

  nftChecker(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pledge(
    _launchId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _staked: PromiseOrValue<boolean>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pledgeWithNFT(
    _launchId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _staked: PromiseOrValue<boolean>,
    _nftId: PromiseOrValue<BigNumberish>,
    _controllerWithNFT: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setControllerFactory(
    _controllerFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFomoIC(
    _fomoIC: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKolAddresses(
    _kolAddresses: PromiseOrValue<string>[],
    _isKol: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMemePlatformFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPledgeLimits(
    _min: PromiseOrValue<BigNumberish>,
    _max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSoftCapAndFees(
    _softCap: PromiseOrValue<BigNumberish>,
    _launchFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSteakIC(
    _steakIC: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSteakPlatformFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  steakIC(overrides?: CallOverrides): Promise<string>;

  tokenAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      usdc: BigNumber;
      fomo: BigNumber;
      token: string;
      fomoLP: string;
      usdcLP: string;
      tokenIC: string;
      tokenICProxy: string;
      fomoLPIC: string;
      usdcLPIC: string;
      vesting: string;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTROLLER_FACTORY(overrides?: CallOverrides): Promise<string>;

    FOMO(overrides?: CallOverrides): Promise<string>;

    LAUNCH_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_MEME_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_STEAK_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    USDC_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_SOFT_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    addDexProvider(
      _dexProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTokens(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLaunch(
      _config: ILaunchCommon.LaunchConfigVarsStruct,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dexProviders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fomoIC(overrides?: CallOverrides): Promise<string>;

    fomoUsdcLp(overrides?: CallOverrides): Promise<string>;

    getFundsBack(
      _launchId: PromiseOrValue<BigNumberish>,
      _stake: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLaunchConfig(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILaunchCommon.LaunchConfigStructOutput>;

    identityVerifier(overrides?: CallOverrides): Promise<string>;

    isKOL(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    launch(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    launchToNFTPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        lp: BigNumber;
        usdc: BigNumber;
        claimed: boolean;
      }
    >;

    launchToUserPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        lp: BigNumber;
        usdc: BigNumber;
        claimed: boolean;
      }
    >;

    launches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, number] & {
        name: string;
        symbol: string;
        dexProvider: string;
        team: string;
        x: string;
        status: number;
      }
    >;

    memberNFT(overrides?: CallOverrides): Promise<string>;

    nftChecker(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pledge(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pledgeWithNFT(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _nftId: PromiseOrValue<BigNumberish>,
      _controllerWithNFT: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setControllerFactory(
      _controllerFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFomoIC(
      _fomoIC: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKolAddresses(
      _kolAddresses: PromiseOrValue<string>[],
      _isKol: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setMemePlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPledgeLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSoftCapAndFees(
      _softCap: PromiseOrValue<BigNumberish>,
      _launchFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSteakIC(
      _steakIC: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSteakPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    steakIC(overrides?: CallOverrides): Promise<string>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        usdc: BigNumber;
        fomo: BigNumber;
        token: string;
        fomoLP: string;
        usdcLP: string;
        tokenIC: string;
        tokenICProxy: string;
        fomoLPIC: string;
        usdcLPIC: string;
        vesting: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HardCapReached(uint256)"(
      launchId?: PromiseOrValue<BigNumberish> | null
    ): HardCapReachedEventFilter;
    HardCapReached(
      launchId?: PromiseOrValue<BigNumberish> | null
    ): HardCapReachedEventFilter;

    "LaunchCreated(string,string,uint256)"(
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null,
      launchId?: PromiseOrValue<BigNumberish> | null
    ): LaunchCreatedEventFilter;
    LaunchCreated(
      name?: PromiseOrValue<string> | null,
      symbol?: PromiseOrValue<string> | null,
      launchId?: PromiseOrValue<BigNumberish> | null
    ): LaunchCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Pledged(uint256,address,uint256,uint256)"(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null
    ): PledgedEventFilter;
    Pledged(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null
    ): PledgedEventFilter;

    "PledgedWithNFT(uint256,address,uint256,uint256,uint256)"(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): PledgedWithNFTEventFilter;
    PledgedWithNFT(
      launchId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      amountLP?: null,
      amountUsdc?: null,
      nftId?: PromiseOrValue<BigNumberish> | null
    ): PledgedWithNFTEventFilter;
  };

  estimateGas: {
    CONTROLLER_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    FOMO(overrides?: CallOverrides): Promise<BigNumber>;

    LAUNCH_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_MEME_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PLATFORM_STEAK_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    USDC_SOFT_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    addDexProvider(
      _dexProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimTokens(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLaunch(
      _config: ILaunchCommon.LaunchConfigVarsStruct,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexProviders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fomoIC(overrides?: CallOverrides): Promise<BigNumber>;

    fomoUsdcLp(overrides?: CallOverrides): Promise<BigNumber>;

    getFundsBack(
      _launchId: PromiseOrValue<BigNumberish>,
      _stake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLaunchConfig(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identityVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    isKOL(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launch(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    launchToNFTPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launchToUserPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    launches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberNFT(overrides?: CallOverrides): Promise<BigNumber>;

    nftChecker(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pledge(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pledgeWithNFT(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _nftId: PromiseOrValue<BigNumberish>,
      _controllerWithNFT: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setControllerFactory(
      _controllerFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFomoIC(
      _fomoIC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKolAddresses(
      _kolAddresses: PromiseOrValue<string>[],
      _isKol: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMemePlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPledgeLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSoftCapAndFees(
      _softCap: PromiseOrValue<BigNumberish>,
      _launchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSteakIC(
      _steakIC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSteakPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    steakIC(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTROLLER_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FOMO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LAUNCH_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM_MEME_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PLATFORM_STEAK_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC_SOFT_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addDexProvider(
      _dexProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLaunch(
      _config: ILaunchCommon.LaunchConfigVarsStruct,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexProviders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fomoIC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fomoUsdcLp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFundsBack(
      _launchId: PromiseOrValue<BigNumberish>,
      _stake: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLaunchConfig(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identityVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isKOL(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launch(
      _launchId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    launchToNFTPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchToUserPledge(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launches(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftChecker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pledge(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pledgeWithNFT(
      _launchId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _staked: PromiseOrValue<boolean>,
      _nftId: PromiseOrValue<BigNumberish>,
      _controllerWithNFT: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setControllerFactory(
      _controllerFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFomoIC(
      _fomoIC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKolAddresses(
      _kolAddresses: PromiseOrValue<string>[],
      _isKol: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMemePlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPledgeLimits(
      _min: PromiseOrValue<BigNumberish>,
      _max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSoftCapAndFees(
      _softCap: PromiseOrValue<BigNumberish>,
      _launchFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSteakIC(
      _steakIC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSteakPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    steakIC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
