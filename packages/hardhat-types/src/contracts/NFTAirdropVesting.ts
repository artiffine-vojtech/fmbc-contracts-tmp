/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace INFTAirdropVesting {
  export type VestingPositionStruct = {
    amount: PromiseOrValue<BigNumberish>;
    amountClaimed: PromiseOrValue<BigNumberish>;
    startTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type VestingPositionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    amount: BigNumber;
    amountClaimed: BigNumber;
    startTimestamp: BigNumber;
  };
}

export interface NFTAirdropVestingInterface extends utils.Interface {
  functions: {
    "addIncentivesController(address)": FunctionFragment;
    "availableToClaim(uint256,uint256,uint256)": FunctionFragment;
    "claimTokens(uint256,uint256[])": FunctionFragment;
    "collection()": FunctionFragment;
    "fmbcToken()": FunctionFragment;
    "getIncentivesControllersCount()": FunctionFragment;
    "getVestingPositions(uint256)": FunctionFragment;
    "getVestingSchedule(uint256,uint256)": FunctionFragment;
    "incentivesControllers(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeIncentivesController(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tgeTimestamp()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestTokens(uint256,address,uint256)": FunctionFragment;
    "vestingPositions(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addIncentivesController"
      | "availableToClaim"
      | "claimTokens"
      | "collection"
      | "fmbcToken"
      | "getIncentivesControllersCount"
      | "getVestingPositions"
      | "getVestingSchedule"
      | "incentivesControllers"
      | "owner"
      | "removeIncentivesController"
      | "renounceOwnership"
      | "tgeTimestamp"
      | "transferOwnership"
      | "vestTokens"
      | "vestingPositions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addIncentivesController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "availableToClaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fmbcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getIncentivesControllersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingPositions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesControllers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeIncentivesController",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tgeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPositions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collection", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fmbcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivesControllersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentivesControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tgeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingPositions",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokensClaimed(address,uint256,uint256,uint256)": EventFragment;
    "TokensVested(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensVested"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokensClaimedEventObject {
  _buyer: string;
  _tokenId: BigNumber;
  positionIndex: BigNumber;
  amount_: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TokensVestedEventObject {
  _tokenId: BigNumber;
  positionIndex: BigNumber;
  amount_: BigNumber;
}
export type TokensVestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TokensVestedEventObject
>;

export type TokensVestedEventFilter = TypedEventFilter<TokensVestedEvent>;

export interface NFTAirdropVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTAirdropVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    availableToClaim(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimTokens(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collection(overrides?: CallOverrides): Promise<[string]>;

    fmbcToken(overrides?: CallOverrides): Promise<[string]>;

    getIncentivesControllersCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestingPositions(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[INFTAirdropVesting.VestingPositionStructOutput[]]>;

    getVestingSchedule(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        timestamps: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    incentivesControllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeIncentivesController(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tgeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        amountClaimed: BigNumber;
        startTimestamp: BigNumber;
      }
    >;
  };

  addIncentivesController(
    _controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  availableToClaim(
    _tokenId: PromiseOrValue<BigNumberish>,
    _positionIndex: PromiseOrValue<BigNumberish>,
    _timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimTokens(
    _tokenId: PromiseOrValue<BigNumberish>,
    _positionIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collection(overrides?: CallOverrides): Promise<string>;

  fmbcToken(overrides?: CallOverrides): Promise<string>;

  getIncentivesControllersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVestingPositions(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<INFTAirdropVesting.VestingPositionStructOutput[]>;

  getVestingSchedule(
    _tokenId: PromiseOrValue<BigNumberish>,
    _positionIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[]] & {
      timestamps: BigNumber[];
      amounts: BigNumber[];
    }
  >;

  incentivesControllers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeIncentivesController(
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tgeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestTokens(
    _amount: PromiseOrValue<BigNumberish>,
    _identity: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingPositions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      amountClaimed: BigNumber;
      startTimestamp: BigNumber;
    }
  >;

  callStatic: {
    addIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    availableToClaim(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokens(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    collection(overrides?: CallOverrides): Promise<string>;

    fmbcToken(overrides?: CallOverrides): Promise<string>;

    getIncentivesControllersCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingPositions(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<INFTAirdropVesting.VestingPositionStructOutput[]>;

    getVestingSchedule(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[]] & {
        timestamps: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    incentivesControllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeIncentivesController(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tgeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        amountClaimed: BigNumber;
        startTimestamp: BigNumber;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokensClaimed(address,uint256,uint256,uint256)"(
      _buyer?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      positionIndex?: PromiseOrValue<BigNumberish> | null,
      amount_?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      _buyer?: PromiseOrValue<string> | null,
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      positionIndex?: PromiseOrValue<BigNumberish> | null,
      amount_?: null
    ): TokensClaimedEventFilter;

    "TokensVested(uint256,uint256,uint256)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      positionIndex?: PromiseOrValue<BigNumberish> | null,
      amount_?: null
    ): TokensVestedEventFilter;
    TokensVested(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      positionIndex?: PromiseOrValue<BigNumberish> | null,
      amount_?: null
    ): TokensVestedEventFilter;
  };

  estimateGas: {
    addIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    availableToClaim(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokens(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collection(overrides?: CallOverrides): Promise<BigNumber>;

    fmbcToken(overrides?: CallOverrides): Promise<BigNumber>;

    getIncentivesControllersCount(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingPositions(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedule(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesControllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeIncentivesController(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tgeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addIncentivesController(
      _controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    availableToClaim(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      _timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokens(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fmbcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getIncentivesControllersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingPositions(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedule(
      _tokenId: PromiseOrValue<BigNumberish>,
      _positionIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivesControllers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeIncentivesController(
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tgeTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestTokens(
      _amount: PromiseOrValue<BigNumberish>,
      _identity: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingPositions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
