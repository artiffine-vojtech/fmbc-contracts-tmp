/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IOAppCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppCore__factory>;
    getContractFactory(
      name: "IOAppMsgInspector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppMsgInspector__factory>;
    getContractFactory(
      name: "IOAppOptionsType3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppOptionsType3__factory>;
    getContractFactory(
      name: "IOAppReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppReceiver__factory>;
    getContractFactory(
      name: "OAppOptionsType3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppOptionsType3__factory>;
    getContractFactory(
      name: "OApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OApp__factory>;
    getContractFactory(
      name: "OAppCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppCore__factory>;
    getContractFactory(
      name: "OAppReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppReceiver__factory>;
    getContractFactory(
      name: "OAppSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppSender__factory>;
    getContractFactory(
      name: "IOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOFT__factory>;
    getContractFactory(
      name: "OFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFT__factory>;
    getContractFactory(
      name: "OFTCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTCore__factory>;
    getContractFactory(
      name: "IOAppPreCrimeSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOAppPreCrimeSimulator__factory>;
    getContractFactory(
      name: "IPreCrime",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPreCrime__factory>;
    getContractFactory(
      name: "OAppPreCrimeSimulator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OAppPreCrimeSimulator__factory>;
    getContractFactory(
      name: "ILayerZeroEndpointV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpointV2__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "IMessageLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageLib__factory>;
    getContractFactory(
      name: "IMessageLibManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageLibManager__factory>;
    getContractFactory(
      name: "IMessagingChannel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingChannel__factory>;
    getContractFactory(
      name: "IMessagingComposer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingComposer__factory>;
    getContractFactory(
      name: "IMessagingContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessagingContext__factory>;
    getContractFactory(
      name: "ISendLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISendLib__factory>;
    getContractFactory(
      name: "AddressCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressCast__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC2981",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Enumerable__factory>;
    getContractFactory(
      name: "ERC721Royalty",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Royalty__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "AirdropNFTHolders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropNFTHolders__factory>;
    getContractFactory(
      name: "AirdropSnapshotWallets",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropSnapshotWallets__factory>;
    getContractFactory(
      name: "BatchTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BatchTransfer__factory>;
    getContractFactory(
      name: "FMBCTokenERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCTokenERC20__factory>;
    getContractFactory(
      name: "USDCMockTokenERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDCMockTokenERC20__factory>;
    getContractFactory(
      name: "ERC721BatchEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721BatchEnumerable__factory>;
    getContractFactory(
      name: "FMBCToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCToken__factory>;
    getContractFactory(
      name: "FMBCLaunchpadVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCLaunchpadVoting__factory>;
    getContractFactory(
      name: "FMBCMemberNFTVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCMemberNFTVerifier__factory>;
    getContractFactory(
      name: "FMBCMemberSale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCMemberSale__factory>;
    getContractFactory(
      name: "INFTWithLevel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTWithLevel__factory>;
    getContractFactory(
      name: "FMBCPublicSale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCPublicSale__factory>;
    getContractFactory(
      name: "FMBCTeamVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCTeamVesting__factory>;
    getContractFactory(
      name: "FMBCVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FMBCVesting__factory>;
    getContractFactory(
      name: "FOMOToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FOMOToken__factory>;
    getContractFactory(
      name: "FomoBullClubNFT_old_polygon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FomoBullClubNFT_old_polygon__factory>;
    getContractFactory(
      name: "FomoBullClubNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FomoBullClubNFT__factory>;
    getContractFactory(
      name: "FomoBullClubPFP",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FomoBullClubPFP__factory>;
    getContractFactory(
      name: "FomoBullClubPFPMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FomoBullClubPFPMinter__factory>;
    getContractFactory(
      name: "FomoIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FomoIncentivesController__factory>;
    getContractFactory(
      name: "FomoProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FomoProxy__factory>;
    getContractFactory(
      name: "FOMOPublicSaleWithCustomToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FOMOPublicSaleWithCustomToken__factory>;
    getContractFactory(
      name: "IncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncentivesController__factory>;
    getContractFactory(
      name: "IAirdropController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAirdropController__factory>;
    getContractFactory(
      name: "IFomoIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFomoIncentivesController__factory>;
    getContractFactory(
      name: "IFomoProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFomoProxy__factory>;
    getContractFactory(
      name: "IFreeMintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFreeMintable__factory>;
    getContractFactory(
      name: "IIdentityVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityVerifier__factory>;
    getContractFactory(
      name: "IIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIncentivesController__factory>;
    getContractFactory(
      name: "IMemberSale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMemberSale__factory>;
    getContractFactory(
      name: "INFTAirdropVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTAirdropVesting__factory>;
    getContractFactory(
      name: "INFTHolderVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTHolderVesting__factory>;
    getContractFactory(
      name: "INFTWithLevel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTWithLevel__factory>;
    getContractFactory(
      name: "IPublicSale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPublicSale__factory>;
    getContractFactory(
      name: "IPublicSaleWithCutomToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPublicSaleWithCutomToken__factory>;
    getContractFactory(
      name: "ITeamVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITeamVesting__factory>;
    getContractFactory(
      name: "ITokenWithLevel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenWithLevel__factory>;
    getContractFactory(
      name: "IVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVesting__factory>;
    getContractFactory(
      name: "ControllerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerFactory__factory>;
    getContractFactory(
      name: "TokenEmissionsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenEmissionsController__factory>;
    getContractFactory(
      name: "TokenIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenIncentivesController__factory>;
    getContractFactory(
      name: "TokenProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenProxy__factory>;
    getContractFactory(
      name: "ERC20MEME",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MEME__factory>;
    getContractFactory(
      name: "IdentityVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentityVerifier__factory>;
    getContractFactory(
      name: "IControllerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IControllerFactory__factory>;
    getContractFactory(
      name: "IDexProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexProvider__factory>;
    getContractFactory(
      name: "IIdentityVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentityVerifier__factory>;
    getContractFactory(
      name: "ILaunchCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILaunchCommon__factory>;
    getContractFactory(
      name: "ILaunchpad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILaunchpad__factory>;
    getContractFactory(
      name: "IMEMEVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMEMEVesting__factory>;
    getContractFactory(
      name: "INFTChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTChecker__factory>;
    getContractFactory(
      name: "ITokenControllerCommons",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenControllerCommons__factory>;
    getContractFactory(
      name: "ITokenEmissionsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenEmissionsController__factory>;
    getContractFactory(
      name: "ITokenIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenIncentivesController__factory>;
    getContractFactory(
      name: "ITokenProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenProxy__factory>;
    getContractFactory(
      name: "Launchpad",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Launchpad__factory>;
    getContractFactory(
      name: "ITokenIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenIncentivesController__factory>;
    getContractFactory(
      name: "IVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVesting__factory>;
    getContractFactory(
      name: "MEMEVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MEMEVesting__factory>;
    getContractFactory(
      name: "IBalanceController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalanceController__factory>;
    getContractFactory(
      name: "NFTChecker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTChecker__factory>;
    getContractFactory(
      name: "BalancerDexProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalancerDexProvider__factory>;
    getContractFactory(
      name: "IBalancerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBalancerFactory__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "IWeightedPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWeightedPool__factory>;
    getContractFactory(
      name: "UniswapV2DexProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2DexProvider__factory>;
    getContractFactory(
      name: "MemberNFTVerifierOnlyTokenId",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MemberNFTVerifierOnlyTokenId__factory>;
    getContractFactory(
      name: "MerkleProofVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleProofVerifier__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "NFTAirdropVesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTAirdropVesting__factory>;
    getContractFactory(
      name: "Adminable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adminable__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;

    getContractAt(
      name: "IOAppCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppCore>;
    getContractAt(
      name: "IOAppMsgInspector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppMsgInspector>;
    getContractAt(
      name: "IOAppOptionsType3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppOptionsType3>;
    getContractAt(
      name: "IOAppReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppReceiver>;
    getContractAt(
      name: "OAppOptionsType3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppOptionsType3>;
    getContractAt(
      name: "OApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OApp>;
    getContractAt(
      name: "OAppCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppCore>;
    getContractAt(
      name: "OAppReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppReceiver>;
    getContractAt(
      name: "OAppSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppSender>;
    getContractAt(
      name: "IOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOFT>;
    getContractAt(
      name: "OFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFT>;
    getContractAt(
      name: "OFTCore",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTCore>;
    getContractAt(
      name: "IOAppPreCrimeSimulator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOAppPreCrimeSimulator>;
    getContractAt(
      name: "IPreCrime",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPreCrime>;
    getContractAt(
      name: "OAppPreCrimeSimulator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OAppPreCrimeSimulator>;
    getContractAt(
      name: "ILayerZeroEndpointV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpointV2>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "IMessageLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageLib>;
    getContractAt(
      name: "IMessageLibManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageLibManager>;
    getContractAt(
      name: "IMessagingChannel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingChannel>;
    getContractAt(
      name: "IMessagingComposer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingComposer>;
    getContractAt(
      name: "IMessagingContext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessagingContext>;
    getContractAt(
      name: "ISendLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISendLib>;
    getContractAt(
      name: "AddressCast",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressCast>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC2981",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2981>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Enumerable>;
    getContractAt(
      name: "ERC721Royalty",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Royalty>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "AirdropNFTHolders",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropNFTHolders>;
    getContractAt(
      name: "AirdropSnapshotWallets",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropSnapshotWallets>;
    getContractAt(
      name: "BatchTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BatchTransfer>;
    getContractAt(
      name: "FMBCTokenERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCTokenERC20>;
    getContractAt(
      name: "USDCMockTokenERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDCMockTokenERC20>;
    getContractAt(
      name: "ERC721BatchEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721BatchEnumerable>;
    getContractAt(
      name: "FMBCToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCToken>;
    getContractAt(
      name: "FMBCLaunchpadVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCLaunchpadVoting>;
    getContractAt(
      name: "FMBCMemberNFTVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCMemberNFTVerifier>;
    getContractAt(
      name: "FMBCMemberSale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCMemberSale>;
    getContractAt(
      name: "INFTWithLevel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTWithLevel>;
    getContractAt(
      name: "FMBCPublicSale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCPublicSale>;
    getContractAt(
      name: "FMBCTeamVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCTeamVesting>;
    getContractAt(
      name: "FMBCVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FMBCVesting>;
    getContractAt(
      name: "FOMOToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FOMOToken>;
    getContractAt(
      name: "FomoBullClubNFT_old_polygon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FomoBullClubNFT_old_polygon>;
    getContractAt(
      name: "FomoBullClubNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FomoBullClubNFT>;
    getContractAt(
      name: "FomoBullClubPFP",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FomoBullClubPFP>;
    getContractAt(
      name: "FomoBullClubPFPMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FomoBullClubPFPMinter>;
    getContractAt(
      name: "FomoIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FomoIncentivesController>;
    getContractAt(
      name: "FomoProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FomoProxy>;
    getContractAt(
      name: "FOMOPublicSaleWithCustomToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FOMOPublicSaleWithCustomToken>;
    getContractAt(
      name: "IncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncentivesController>;
    getContractAt(
      name: "IAirdropController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAirdropController>;
    getContractAt(
      name: "IFomoIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFomoIncentivesController>;
    getContractAt(
      name: "IFomoProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFomoProxy>;
    getContractAt(
      name: "IFreeMintable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFreeMintable>;
    getContractAt(
      name: "IIdentityVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityVerifier>;
    getContractAt(
      name: "IIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIncentivesController>;
    getContractAt(
      name: "IMemberSale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMemberSale>;
    getContractAt(
      name: "INFTAirdropVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTAirdropVesting>;
    getContractAt(
      name: "INFTHolderVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTHolderVesting>;
    getContractAt(
      name: "INFTWithLevel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTWithLevel>;
    getContractAt(
      name: "IPublicSale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPublicSale>;
    getContractAt(
      name: "IPublicSaleWithCutomToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPublicSaleWithCutomToken>;
    getContractAt(
      name: "ITeamVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITeamVesting>;
    getContractAt(
      name: "ITokenWithLevel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenWithLevel>;
    getContractAt(
      name: "IVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVesting>;
    getContractAt(
      name: "ControllerFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerFactory>;
    getContractAt(
      name: "TokenEmissionsController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenEmissionsController>;
    getContractAt(
      name: "TokenIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenIncentivesController>;
    getContractAt(
      name: "TokenProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenProxy>;
    getContractAt(
      name: "ERC20MEME",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MEME>;
    getContractAt(
      name: "IdentityVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentityVerifier>;
    getContractAt(
      name: "IControllerFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IControllerFactory>;
    getContractAt(
      name: "IDexProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDexProvider>;
    getContractAt(
      name: "IIdentityVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentityVerifier>;
    getContractAt(
      name: "ILaunchCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILaunchCommon>;
    getContractAt(
      name: "ILaunchpad",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILaunchpad>;
    getContractAt(
      name: "IMEMEVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMEMEVesting>;
    getContractAt(
      name: "INFTChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTChecker>;
    getContractAt(
      name: "ITokenControllerCommons",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenControllerCommons>;
    getContractAt(
      name: "ITokenEmissionsController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenEmissionsController>;
    getContractAt(
      name: "ITokenIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenIncentivesController>;
    getContractAt(
      name: "ITokenProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenProxy>;
    getContractAt(
      name: "Launchpad",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Launchpad>;
    getContractAt(
      name: "ITokenIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokenIncentivesController>;
    getContractAt(
      name: "IVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVesting>;
    getContractAt(
      name: "MEMEVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MEMEVesting>;
    getContractAt(
      name: "IBalanceController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalanceController>;
    getContractAt(
      name: "NFTChecker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTChecker>;
    getContractAt(
      name: "BalancerDexProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalancerDexProvider>;
    getContractAt(
      name: "IBalancerFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBalancerFactory>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "IWeightedPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWeightedPool>;
    getContractAt(
      name: "UniswapV2DexProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2DexProvider>;
    getContractAt(
      name: "MemberNFTVerifierOnlyTokenId",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MemberNFTVerifierOnlyTokenId>;
    getContractAt(
      name: "MerkleProofVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleProofVerifier>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "NFTAirdropVesting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTAirdropVesting>;
    getContractAt(
      name: "Adminable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Adminable>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
